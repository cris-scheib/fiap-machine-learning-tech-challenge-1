openapi: 3.0.3
info:
  title: "API de Livros - FIAP Machine Learning Tech Challenge 1"
  description: |
    ## 游닄 API RESTful para gerenciamento de livros obtidos via web scraping de https://books.toscrape.com

    
    ### Principais recursos:
    - **Cadastro e login e informa칞칫es de usu치rios**
    - **Autentica칞칚o via JWT (Bearer Token)**
    - **Consulta de livros**: listagem, busca por ID ou por t칤tulo/categoria, mais avaliados e por m칠dia de pre칞os
    - **Estat칤sticas** gerais e por categoria
    - **Trigger de scraping via endpoint** para atualizar os dados
    - **Health-check** da API

    ### Instru칞칫es de uso
    
    ###  1. Selecione um servidor
        
      **Em servers escolha:**  
       
       - **Produ칞칚o**: https://fiap-machine-learning-tech-challeng.vercel.app - Vercel server
    
       - **Local**: http://127.0.0.1:8000 - Execu칞칚o local

    ###  1. Cadastro de usu치rio 
        
      **Cadastre um usu치rio ou utilize o de teste j치 existente:**  
       
       - **Username**: `test_user` 
    
       - **Password**: `test12345`

    ###  2. Obter token
       
       `POST /auth/login`  
       - Body:
    
         `username`: test_user  
    
         `password`: test12345
    
       - Retorna JSON com `access_token`, `refresh_token` e `token_type`

    ###  3. Endpoints protegidos  
       Inclua o token no header:  
       ```
       Authorization: Bearer <access_token>
       ```
  version: "1.0.0"

servers:
  - url: "https://fiap-machine-learning-tech-challeng.vercel.app"
    description: "Vercel server"
  - url: "http://127.0.0.1:8000"
    description: "Execu칞칚o local"

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
      required:
        - detail

    Health:
      type: object
      properties:
        status:
          type: string
          example: "ok"
      required:
        - status

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "alice"
      required:
        - id
        - username

    UserCreate:
      type: object
      properties:
        username:
          type: string
          example: "bob"
        password:
          type: string
          example: "strongpassword"
      required:
        - username
        - password

    UserOut:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "novo_usuario"
      required:
        - id
        - username

    Token:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          example: "bearer"
      required:
        - access_token
        - refresh_token
        - token_type

    Book:
      type: object
      properties:
        id:
          type: integer
          example: 824
        title:
          type: string
          example: "A Light in the Attic"
        price:
          type: number
          format: float
          example: 51.77
        availability:
          type: string
          example: "In Stock"
        rating:
          type: string
          example: "Three"
        category:
          type: string
          example: "Poetry"
        image_url:
          type: string
          example: "https://books.toscrape.com/media/cache/fe/72/fe72f0532301ec28892ae79a629a293c.jpg"
      required:
        - id
        - title
        - price
        - availability
        - rating
        - category
        - image_url

    Category:
      type: string
      properties:
        name:
          type: string
          example: "Poetry"
      required:
        - name

    Stats:
      type: object
      properties:
        total_books:
          type: integer
          example: 1000
        average_price:
          type: number
          format: float
          example: 35.12
        rating_distribution:
          type: object
          description: "Distribution of books by rating"
          example:
            Five: 197
            Four: 181
            One: 228
            Three: 206
            Two: 199
          required:
            - total_books
            - average_price
            - rating_distribution

    CategoryStats:
      type: object
      properties:
        category:
          type: string
          example: "Poetry"
        total_books:
          type: integer
          example: 42
        average_price:
          type: number
          format: float
          example: 28.99
      required:
        - category
        - total_books
        - average_price

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

paths:
  /health:
    get:
      tags: ["Health"]
      summary: Health check
      description:  Verifica status da API e conectividade com os dados.
      responses:
        '200':
          description: API est치 saud치vel
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"

  /users:
    post:
      tags: ["Users"]
      summary: Cria um novo usu치rio
      description: Registra um novo usu치rio no sistema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        '200':
          description: Usu치rio criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreate"
        '400':
          description: Usu치rio j치 existe

  /users/me:
    get:
      tags: ["Users"]
      summary: Detalhes do usu치rio
      description: Obt칠m detalhes do usu치rio autenticado
      responses:
        '200':
          description: Detalhes do usu치rio
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          description: Usu치rio n칚o autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      tags: ["Auth"]
      summary: Login para obter o token de acesso
      description: Realiza login para criar e retornar o token de acesso JWT do usu치rio autenticado
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Token gerado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        '401':
          description: Nome de usu치rio ou senha incorretos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/refresh:
    post:
      tags: ["Auth"]
      summary: "Renova access token"
      description: "Usa refresh token para gerar novo access token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              required: ["refresh_token"]
      responses:
        200:
          description: Novo access token gerado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        401:
          description: Refresh token inv치lido ou expirado

  /api/v1/books:
    get:
      tags: ["Books"]
      summary: Lista todos os livros
      description: Lista todos os livros dispon칤veis na base de dados.
      responses:
        '200':
          description: Lista de livros
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '401':
          description: Usu치rio n칚o autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Ocorreu um erro interno no servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/books/{id}:
    parameters:
      - name: id
        in: path
        description: ID do livro a ser detalhado
        required: true
        schema:
          type: integer
    get:
      tags: ["Books"]
      summary: Detalhe de um livro pelo ID
      description: Retorna detalhes completos de um livro espec칤fico pelo ID.
      responses:
        '200':
          description: Detalhes do livro
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        '401':
          description: "Usu치rio n칚o autenticado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: "Livro n칚o encontrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Ocorreu um erro interno no servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/books/search:
    get:
      tags: ["Books"]
      summary: "Busca livros por t칤tulo e/ou categoria"
      description: "Retorna uma lista de livros filtrados por t칤tulo e ou categoria, 
      caso nenhum t칤tulo ou categoria seja passado retorna uma lista com todos os livros."
      parameters:
        - name: title
          in: query
          description: T칤tulo (ou parte) do livro
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: Nome da categoria
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Resultados da busca
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '401':
          description: "Usu치rio n칚o autenticado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Ocorreu um erro interno no servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/books/top-rated:
    get:
      tags: ["Books"]
      summary: Lista livros com melhor avalia칞칚o
      description: Retorna uma lista de livros com as melhores avalia칞칫es (rating mais alto)
      parameters:
        - name: limit
          in: query
          description: N칰mero de livros com as avalia칞칫es mais altas
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            example: 10
      responses:
        '200':
          description: Resultados dos livros com melhores avalia칞칫es
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '401':
          description: "Usu치rio n칚o autenticado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Erro no servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/books/price-range:
    get:
      tags: ["Books"]
      summary: "Filtra livros dentro de uma faixa de pre칞o espec칤fica."
      description: "Retorna uma lista filtrada de livros dentro de uma faixa de pre칞o espec칤fica que est치 entre **min** e **max** (inclusivo)"
      parameters:
        - name: min
          in: query
          description: "Pre칞o m칤nimo"
          required: true
          schema:
            type: number
            format: float
            minimum: 0.0
            example: 20.0
        - name: max
          in: query
          description: "Pre칞o m치ximo"
          required: true
          schema:
            type: number
            format: float
            minimum: 0.0
            example: 50.0
      responses:
        '200':
          description: "Uma lista de livros dentro da faixa de pre칞o fornecida"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '400':
          description: "Valor m칤nimo n칚o deve ser maior que o valor m치ximo."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: "Usu치rio n칚o autenticado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Ocorreu um erro interno no servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


  /api/v1/categories:
    get:
      tags: ["Categories"]
      summary: "Lista todas as categorias"
      description: "Retorna uma lista contendo todas as categorias dos livros dispon칤veis"
      responses:
        '200':
          description: "Lista de categorias"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        '401':
          description: "Usu치rio n칚o autenticado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Ocorreu um erro interno no servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/stats/overview:
    get:
      tags: ["Stats"]
      summary: "Estat칤sticas gerais dos livros"
      description: "Retorna estat칤sticas gerais, como n칰mero total de livros, pre칞o m칠dio 
      e distribui칞칚o de classifica칞칚o."
      responses:
        '200':
          description: "Estat칤sticas de vis칚o geral retornadas com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stats"
        '401':
          description: "Usu치rio n칚o autenticado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Ocorreu um erro interno no servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/stats/categories:
    get:
      tags: ["Stats"]
      summary: "Obtenha estat칤sticas por categoria"
      description: "Retorna estat칤sticas agrupadas por categoria, incluindo n칰mero de livros 
      e pre칞o m칠dio por categoria."
      responses:
        '200':
          description: "Estat칤sticas de categoria retornadas com sucesso"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryStats"
        '401':
          description: "Usu치rio n칚o autenticado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Ocorreu um erro interno no servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/scraping/trigger:
    post:
      tags: ["Scraping"]
      summary: "Aciona manualmente o processo de scraping"
      responses:
        '202':
          description: "Scraping iniciado"
        '401':
          description: "Usu치rio n칚o autenticado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Erro ao iniciar scraping"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
