name: Python Critical Security Checks

on:
  push:
    branches: [master, develop, feature/**]
  pull_request:
    branches: [master, develop, release/**]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout do código
        uses: actions/checkout@v4

      - name: 🐍 Setup do Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 💾 Cache de dependências
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🛠️ Configurar PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)/src/app" >> $GITHUB_ENV

      - name: 📥 Instalar dependências
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "⚠️ requirements.txt não encontrado. Instalando dependências básicas..."
            pip install pytest ruff bandit safety coverage pytest-asyncio>=0.23.0 
          fi

      - name: 🛡️ Rodar verificações de qualidade
        run: |
          echo "## 🔴 **Relatório de Qualidade**" > $GITHUB_STEP_SUMMARY
          echo "📅 **Execução:** $(TZ='America/Sao_Paulo' date +'%d/%m/%Y %H:%M:%S (BRT)')" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY

          echo "RUFF_STATUS=🟢 OK" >> $GITHUB_ENV
          echo "BANDIT_STATUS=🟢 OK" >> $GITHUB_ENV
          echo "SAFETY_STATUS=🟢 OK" >> $GITHUB_ENV
          echo "TESTS_STATUS=🟢 OK" >> $GITHUB_ENV

          echo "### 🔍 Ruff (Bugs/Security)" >> $GITHUB_STEP_SUMMARY
          ruff check src/ --select B,S --format=github > ruff_output.log || true
          if grep "::error" ruff_output.log > /dev/null; then
            echo "RUFF_STATUS=🔴 Problemas encontrados" >> $GITHUB_ENV
            echo '| Arquivo | Linha | Código | Descrição |' >> $GITHUB_STEP_SUMMARY
            echo '|---------|-------|--------|-----------|' >> $GITHUB_STEP_SUMMARY
            grep "::error" ruff_output.log | awk -F'::' '{split($3, loc, ":"); print "| " loc[1] " | " loc[2] " | " $4 " | " $5 " |"}' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Nenhum problema crítico encontrado com Ruff." >> $GITHUB_STEP_SUMMARY
          fi

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Bandit (Vulnerabilidades)" >> $GITHUB_STEP_SUMMARY
          bandit -r src/ -ll --severity-level high --confidence-level high -f custom \
            --msg-template "{abspath}:{line}: {severity}: {test_id}: {msg}" > bandit_output.log || true
          if [ -s bandit_output.log ]; then
            echo "BANDIT_STATUS=🔴 Vulnerabilidades encontradas" >> $GITHUB_ENV
            echo '| Arquivo | Linha | Severidade | Código | Descrição |' >> $GITHUB_STEP_SUMMARY
            echo '|---------|-------|-------------|--------|-----------|' >> $GITHUB_STEP_SUMMARY
            awk -F':' '{print "| " $1 " | " $2 " | " $3 " | " $4 " | " $5 " |"}' bandit_output.log >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Nenhuma vulnerabilidade alta encontrada com Bandit." >> $GITHUB_STEP_SUMMARY
          fi

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Safety (CVEs Críticos)" >> $GITHUB_STEP_SUMMARY
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --output=bare > safety_output.log || true
          else
            safety check --output=bare > safety_output.log || true
          fi
          if grep -i "CRITICAL" safety_output.log > /dev/null; then
            echo "SAFETY_STATUS=🔴 CVEs críticos encontrados" >> $GITHUB_ENV
            echo '| Pacote | Versão instalada | CVE | Descrição |' >> $GITHUB_STEP_SUMMARY
            echo '|--------|------------------|-----|------------|' >> $GITHUB_STEP_SUMMARY
            grep -i "CRITICAL" safety_output.log | awk -F',' '{print "| " $1 " | " $2 " | " $3 " | " $5 " |"}' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Nenhuma vulnerabilidade crítica em dependências (Safety)." >> $GITHUB_STEP_SUMMARY
          fi

          echo "---" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Rodar testes com cobertura
        run: |
          if [ -d "tests" ]; then
            echo "### 🧪 Resultados dos Testes" >> $GITHUB_STEP_SUMMARY
            python -m pytest tests/ --cov=api/app --cov-report=term-missing
            TEST_RESULT=$?

            if [ $TEST_RESULT -eq 0 ]; then
              echo "🟢 **Status:** OK" >> $GITHUB_STEP_SUMMARY
            else
              echo "TESTS_STATUS=🔴 Falhas nos testes" >> $GITHUB_ENV
              echo "🔴 **Status:** Falhou" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              grep -E "FAILURES|FAILED|ERROR" -A 10 result.log >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi

          else
            echo "⚠️ **Pasta de testes não encontrada em tests.**"
            exit 0
          fi

      - name: 📌 Resumo Final + Link para Relatório HTML
        run: |
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Resumo Final" >> $GITHUB_STEP_SUMMARY
          echo '| Verificação | Status |' >> $GITHUB_STEP_SUMMARY
          echo '|-------------|--------|' >> $GITHUB_STEP_SUMMARY
          echo "| Ruff         | ${{ env.RUFF_STATUS }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Bandit       | ${{ env.BANDIT_STATUS }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Safety       | ${{ env.SAFETY_STATUS }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Testes       | ${{ env.TESTS_STATUS }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [Clique aqui para acessar o Relatório de Cobertura HTML (Artifact)](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY